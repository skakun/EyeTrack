import cv2
import time
radius = 5
def main():
    capture = cv2.VideoCapture(0)

    capture.set(cv2.CAP_PROP_FRAME_WIDTH, 1280)
    capture.set(cv2.CAP_PROP_FRAME_HEIGHT, 720)
    # set click coordinates helper #
#   cv2.namedWindow('Frame')
#   cv2.setMouseCallback('Frame', cursor_position)

    # begin_t = time.time()
    while True:
        # print("Iteration time: {}".format(time.time()-begin_t))

        # find face and eyes #
        _, frame = capture.read()
        gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)
        rects = detector(gray, 0)
        if len(rects) <= 0:
            cv2.imshow("Frame", frame)
            if cv2.waitKey(1) == ord('q'):
                break
            continue

        rect = rects[0]
        shape = predictor(gray, rect)
        shape = face_utils.shape_to_np(shape)
        left_eye = shape[lstart:lend]
        right_eye = shape[rstart:rend]
        left_eye_hull = cv2.convexHull(left_eye)
        right_eye_hull = cv2.convexHull(right_eye)
   #    reye = EyeSnip(frame, shape, 'r')
   #    leye = EyeSnip(frame, shape, 'l')
        reye=EyeSnipper.get_from_hull(frame,shape,'r')
        leye=EyeSnipper.get_from_hull(frame,shape,'l')
        if not (reye.scope_OK and reye.shiftbox_OK and
                leye.scope_OK and leye.shiftbox_OK):
#           cv2.imshow("Frame", frame)
            print("not ok\n")
            if cv2.waitKey(1) == ord('q'):
                break
            continue
        print("Right eye:\n Retina pos in frame: {} \n Retina pos in snip: {}\n Ear:{}".format(
            reye.calc_shifted_darkest_point(), reye.calc_darkest_point(), reye.eye_aspect_ratio))

        # display resized right eye in gray #
        greye_area = cv2.cvtColor(reye.snip, cv2.COLOR_BGR2GRAY)
        dim = (greye_area.shape[1] * 3, greye_area.shape[0] * 3)
        resized_greye_area = cv2.resize(greye_area, dim, interpolation=cv2.INTER_AREA)
    #   cv2.imshow("Right eye", resized_greye_area)
    #   cv2.imshow("tresh",cv2.resize(reye.get_thresh(),dim,interpolation=cv2.INTER_AREA))
        # find pupil in eye region #

        # (canny edges) #
        reye_edges = reye.canny_edges()
        dim = (reye_edges.shape[1] * 3, reye_edges.shape[0] * 3)
        resized_reye_edges = cv2.resize(reye_edges, dim, interpolation=cv2.INTER_AREA)
        cv2.imshow("Edges", resized_reye_edges)

        # (darkest point/eye aspect ratio) #
    #   cv2.circle(reye.snip, reye.calc_darkest_point(), radius, (0, 255, 0), 2)
        cv2.circle(leye.snip, leye.calc_darkest_point(), radius, (0, 255, 0), 2)
        # cv2.circle(frame, reye.calc_shifted_darkest_point(), radius, (0, 255, 0), 2)
        # cv2.circle(frame, leye.calc_shifted_darkest_point(), radius, (0, 255, 0), 2)

        # mark eye contours #
        cv2.drawContours(frame, [left_eye_hull], -1, YELLOW_COLOR, 1)
        cv2.drawContours(frame, [right_eye_hull], -1, YELLOW_COLOR, 1)
        if (
            rect.top() < 0 or rect.bottom() < 0 or
            rect.left() < 0 or rect.right() < 0
        ):
           #cv2.imshow("Frame", frame)
            if cv2.waitKey(1) == ord('q'):
                break
            continue

        # display resized and mark face rectangle #
        face = frame[rect.top():rect.bottom(), rect.left():rect.right()]
        dim = (face.shape[1] * 3, face.shape[0] * 3)
        face = cv2.resize(face, dim, interpolation=cv2.INTER_AREA)
#       cv2.imshow("Face", face)

        cv2.rectangle(frame, (rect.left(), rect.top()), (rect.right(), rect.bottom()), YELLOW_COLOR)
        cv2.imshow("Frame", frame)

        # sshot=cv2.imread('idylla.jpg',0)
        # sshot = cv2.cvtColor(np.array(sshot), cv2.COLOR_RGB2BGR)
        # cursorPos=transPoint(reye.calc_darkest_point(),reye.scope,sshot.shape[:2],(1,1))
        # cv2.circle(sshot, cursorPos,radius, (0, 0, 255), 2)
        # cv2.imshow("Screenshot", sshot)
    #   cv2.imshow("segments", cv2.resize(reye.get_segments(), dim, interpolation=cv2.INTER_AREA))
     #  cv2.imshow("thresh",reye.get_thresh())
     #  cv2.imshow("segments",reye.get_segments())
        cv2.imshow("contour",reye.get_countur())
        if cv2.waitKey(1) == ord('q'):
            break

if __name__ == '__main__':
    main()
